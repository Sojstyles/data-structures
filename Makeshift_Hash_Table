

# This is my attempt at a hash table with separate chaining WITHOUT
# using the built in dictionary structure. Since we technically use lists,
# the time complexities for operations (ex. for deletion of items) don't
# exactly correspond with those of a genuine hash table, which may or may not
# defeat the whole purpose of making this I guess.

import hashlib, math, linked_list

#--------------------------------------------------------# 

class numHashTable():
    """ Creates a hash table as a collection of linked lists 
        to store numbers
    """
    
    def __init__(self):
        self.row0 = linked_list.linkedList()
        self.row1 = linked_list.linkedList()
        self.row2 = linked_list.linkedList()
        self.row3 = linked_list.linkedList()
        self.row4 = linked_list.linkedList()
        self.table = [self.row0, self.row1, self.row2]
        self.table += [self.row3, self.row4]
        
    def insert(self, num):
        """ Takes a number, hashes it, then inserts it into the table"""
        hashed = hash(num * math.e) % 5
        if hashed == 0:
            self.row0.insert(num)
        elif hashed == 1:
            self.row1.insert(num)
        elif hashed == 2:
            self.row2.insert(num)
        elif hashed == 3:
            self.row3.insert(num)
        else:
            self.row4.insert(num)

    def search(self, key):
        """ Returns the number that is mapped to by the inputted key or 
            an error if the number is not in the table
        """
        return 
 
    
    def delete(self, key):
        """ Deletes the number that is mapped to by the inputted key
            or returns an error if the number is not in the table
        """
        return
        
    def display_table(self):
        """ Prints all the contents of the hash table"""
        for list in self.table:
            print(list.get_list())
        
#--------------------------------------------------------# 

class strHashTable():
    """ Creates a hash table to store strings"""
    
    def __init__(self):
        self.row0 = linked_list.linkedList()
        self.row1 = linked_list.linkedList()
        self.row2 = linked_list.linkedList()
        self.row3 = linked_list.linkedList()
        self.row4 = linked_list.linkedList()
        self.table = [self.row0, self.row1, self.row2]
        self.table += [self.row3, self.row4]
        
    def insert(self, string):
        """ Takes a string, hashes it, then inserts it into the table"""
        hashed = hash(string) % 5
        if hashed == 0:
            self.row0.insert(string)
        elif hashed == 1:
            self.row1.insert(string)
        elif hashed == 2:
            self.row2.insert(string)
        elif hashed == 3:
            self.row3.insert(string)
        else:
            self.row4.insert(string)
        
    def search(self, key):
        """ Returns the string that is mapped to by the inputted key or 
            an error if the number is not in the table
        """
        return ""
 
    
    def delete(self, key):
        """ Deletes the string that is mapped to by the inputted key
            or returns an error if the number is not in the table
        """
        return 
   
    def display_table(self):
        """ Prints all the contents of the hash table"""
        for list in self.table:
            print(list.get_list())
    
#--------------------------------------------------------# 
  
sample_numHash = numHashTable()
sample_numHash.insert(math.pi)
sample_numHash.insert(math.e)
sample_numHash.insert(2018)
for num in range(1, 100, 7):
    sample_numHash.insert(num)
sample_numHash.display_table()
print()

sample_strHash = strHashTable()
sample_strHash.insert("Hello World!")
sample_strHash.insert("Python")
sample_strHash.insert("Dictionary")
sample_strHash.insert("Hash Table")
sample_strHash.display_table()
print()

